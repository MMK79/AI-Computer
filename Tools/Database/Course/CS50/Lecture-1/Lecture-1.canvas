{
	"nodes":[
		{"id":"8749ef96bd6d531a","type":"group","x":620,"y":-40,"width":780,"height":640,"label":"Connect Tables"},
		{"id":"49233b4763ed3284","type":"text","text":"Relational Database","x":-420,"y":-295,"width":250,"height":60},
		{"id":"789d54257ad050a1","type":"text","text":"different type of relationships","x":-40,"y":-180,"width":277,"height":60},
		{"id":"7adc6187dd5a85f6","type":"text","text":"Multiple tables","x":-40,"y":-400,"width":250,"height":60},
		{"id":"c7324c97a1b94f43","type":"text","text":"less redundancy in data","x":360,"y":-400,"width":250,"height":60},
		{"id":"42e682f32f78158b","type":"text","text":"One-to-One\nOne-to-Many\nMany-to-Many","x":314,"y":-203,"width":171,"height":106},
		{"id":"6f10708dca97c45d","type":"text","text":"Entity Relationship Diagrams (ERD)","x":610,"y":-175,"width":340,"height":50},
		{"id":"4dc0b28d0a69f85c","type":"text","text":"tools:\ndraw.io\nmermaid chart (code-as-diagram)","x":1020,"y":-210,"width":325,"height":121},
		{"id":"2ea315c41435c046","type":"text","text":"Keys","x":640,"y":78,"width":99,"height":60},
		{"id":"8c255fa1cf57c32b","type":"text","text":"### Primary Keys:\nunique id for each row in a table\n* long primary key can take a lot of space, 0 at start can be challenge so we use id instead\n* You can change it, but it is dangerous\n`PRIMARY KEY(\"id\")`","x":950,"y":-24,"width":417,"height":264},
		{"id":"8a8f1ea9f20de4f9","type":"text","text":"### Foreign Key:\nPrimary key of other table be use in other table\n`FOREIGN KEY(\"name\") REFERENCES \"table\"(\"id\")`\n* having multiple foreign key is fine, but having multiple primary key in a same table is bad","x":950,"y":275,"width":417,"height":285},
		{"id":"8797754e6cb0e985","type":"text","text":"Junction table, associated entity, joint table:\ncreate a table by connecting the primary key of 2 other table","x":1480,"y":240,"width":513,"height":76},
		{"id":"0b21463f7e721d15","type":"text","text":"Sub-queries/Nested queries:\nquery inside a query\n* with use of `()`\n\t* the query inside parenthesis will run first then the result will be use in other query\n* Use `IN` instead of  `=` when you have set of values","x":-420,"y":720,"width":420,"height":280},
		{"id":"59eb837c86ff498d","type":"text","text":"```\nSELECT \"column0s\", \"column1s\"\nFROM \"table0\" (left table)\nJOIN \"table1\" (right table)\nON \"table1\".\"foreign key\" = \"table0\".\"primary key\"\n```\n* primary key and foreign key must be same\nin inner join if the primary key and the foreign key don't match we drop that row","x":540,"y":940,"width":590,"height":259},
		{"id":"fe3c836fc81c8525","type":"text","text":"Inner Join (default join in sqlite)","x":100,"y":1044,"width":300,"height":52},
		{"id":"19a2c4d4a2e02d65","type":"text","text":"* Left join $\\rightarrow$ keep the mismatch/missing key rows of left table\n* Right join $\\rightarrow$ keep the mismatch/missing key rows of the right table\n* Full join $\\rightarrow$ keep all mismatch/missing key rows\nlet you keep the row even if primary key and foreign key didn't match","x":540,"y":1224,"width":592,"height":125},
		{"id":"f422c1eefbc7a72a","type":"text","text":"don't include same column (id) in the result\njust tell what table you want to join, it will handle it himself","x":540,"y":1420,"width":433,"height":124},
		{"id":"77789dab88ac3432","type":"text","text":"NATURL LEFT JOIN\nNATURL RIGHT JOIN NATURL FULL JOIN","x":1080,"y":1426,"width":280,"height":112},
		{"id":"4d669cf7868aa393","type":"text","text":"Join tables:\ncombine tables with each\nother with use of primary key\n* result of join is temporary and will not be saved, but can be use in another query as a sub query","x":-420,"y":1187,"width":376,"height":199},
		{"id":"0c91effd2f4177c0","type":"text","text":"Outer join","x":100,"y":1257,"width":250,"height":60},
		{"id":"92c5758b9d5ca64b","type":"text","text":"Natural Join","x":100,"y":1452,"width":250,"height":60},
		{"id":"47edd2a137d6dbef","type":"text","text":"Relating","x":-880,"y":830,"width":250,"height":60},
		{"id":"4ec9e82d06fa9f80","type":"text","text":"Intersect:\nYou are in both set\nUnion:\nYou are in either set\nExcept (-)\n* You can only use this when your sets have the same number AND type  of column","x":60,"y":1592,"width":480,"height":229},
		{"id":"00bf11bc0c35c546","type":"text","text":"Set:\nResult can be called the result set","x":-420,"y":1660,"width":354,"height":93},
		{"id":"7555cecd78d2e3ea","type":"text","text":"Groups:\n`GROUP BY`\n* There is a different keyword for conditioning on groups `HAVING`","x":-420,"y":2000,"width":423,"height":159},
		{"id":"b1f8ba7ebfa0eb79","x":-1320,"y":830,"width":250,"height":60,"type":"text","text":"Lecture-01"}
	],
	"edges":[
		{"id":"b4f99bafc7e2acba","fromNode":"49233b4763ed3284","fromSide":"right","toNode":"789d54257ad050a1","toSide":"left"},
		{"id":"1c240323abc3f73b","fromNode":"49233b4763ed3284","fromSide":"right","toNode":"7adc6187dd5a85f6","toSide":"left"},
		{"id":"95063809e159c1d4","fromNode":"7adc6187dd5a85f6","fromSide":"right","toNode":"c7324c97a1b94f43","toSide":"left","label":"result to"},
		{"id":"d9ef04c6ea6f9bd4","fromNode":"789d54257ad050a1","fromSide":"right","toNode":"42e682f32f78158b","toSide":"left"},
		{"id":"3a71c15ec81c41f7","fromNode":"42e682f32f78158b","fromSide":"right","toNode":"6f10708dca97c45d","toSide":"left","label":"to show"},
		{"id":"a361613c09083388","fromNode":"6f10708dca97c45d","fromSide":"right","toNode":"4dc0b28d0a69f85c","toSide":"left"},
		{"id":"aa56372117ad5141","fromNode":"42e682f32f78158b","fromSide":"right","toNode":"2ea315c41435c046","toSide":"left","label":"to implement"},
		{"id":"46ed962ef4f4292f","fromNode":"2ea315c41435c046","fromSide":"right","toNode":"8c255fa1cf57c32b","toSide":"left"},
		{"id":"a1e738023604a5d4","fromNode":"2ea315c41435c046","fromSide":"right","toNode":"8a8f1ea9f20de4f9","toSide":"left"},
		{"id":"230afb9da91d060a","fromNode":"8749ef96bd6d531a","fromSide":"right","toNode":"8797754e6cb0e985","toSide":"left"},
		{"id":"13b5816297e42206","fromNode":"47edd2a137d6dbef","fromSide":"right","toNode":"49233b4763ed3284","toSide":"left"},
		{"id":"8247c0b3b1c7c920","fromNode":"47edd2a137d6dbef","fromSide":"right","toNode":"0b21463f7e721d15","toSide":"left"},
		{"id":"4a2459b02c9427ca","fromNode":"47edd2a137d6dbef","fromSide":"right","toNode":"4d669cf7868aa393","toSide":"left"},
		{"id":"3f72cd1525af6d88","fromNode":"4d669cf7868aa393","fromSide":"right","toNode":"fe3c836fc81c8525","toSide":"left"},
		{"id":"26e1535e57c4dea9","fromNode":"4d669cf7868aa393","fromSide":"right","toNode":"0c91effd2f4177c0","toSide":"left"},
		{"id":"11938dba5b4bf750","fromNode":"4d669cf7868aa393","fromSide":"right","toNode":"92c5758b9d5ca64b","toSide":"left"},
		{"id":"a9886784cc1188eb","fromNode":"fe3c836fc81c8525","fromSide":"right","toNode":"59eb837c86ff498d","toSide":"left"},
		{"id":"7f89eece34d80fa4","fromNode":"0c91effd2f4177c0","fromSide":"right","toNode":"19a2c4d4a2e02d65","toSide":"left"},
		{"id":"fe178bf26fc83039","fromNode":"92c5758b9d5ca64b","fromSide":"right","toNode":"f422c1eefbc7a72a","toSide":"left"},
		{"id":"a0df0670db58f0dc","fromNode":"f422c1eefbc7a72a","fromSide":"right","toNode":"77789dab88ac3432","toSide":"left"},
		{"id":"4edd1bd5404eb982","fromNode":"47edd2a137d6dbef","fromSide":"right","toNode":"00bf11bc0c35c546","toSide":"left"},
		{"id":"7df1c7cf96a99e6a","fromNode":"00bf11bc0c35c546","fromSide":"right","toNode":"4ec9e82d06fa9f80","toSide":"left"},
		{"id":"71760e8f38c56e73","fromNode":"47edd2a137d6dbef","fromSide":"right","toNode":"7555cecd78d2e3ea","toSide":"left"},
		{"id":"96bb10c86f14eb65","fromNode":"b1f8ba7ebfa0eb79","fromSide":"right","toNode":"47edd2a137d6dbef","toSide":"left"}
	]
}