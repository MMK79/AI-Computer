{
	"nodes":[
		{"id":"1cef065e5a0e9075","type":"group","x":1132,"y":874,"width":2152,"height":820,"label":"Instance"},
		{"id":"b80a50eae00f1995","type":"group","x":380,"y":-324,"width":1283,"height":162,"label":"Object Oriented Programming"},
		{"id":"d28c7ad80b9528f8","type":"text","text":"Lecture-17","x":-400,"y":-80,"width":250,"height":60},
		{"id":"ef43f49d495763fb","type":"text","text":"Python Class:\nDefining our own Object","x":-20,"y":-80,"width":250,"height":60},
		{"id":"0ae2a3cfba8070c1","type":"text","text":"Each Object has:\n* An internal data representation (primitive or composite)\n* Set of procedure for interaction with that object","x":400,"y":-300,"width":483,"height":113},
		{"id":"0727cf47b55915dd","type":"text","text":"* An Object is an instance of a type\n* Objects create by use of blueprint\n","x":980,"y":-304,"width":300,"height":122},
		{"id":"34676681003109b2","type":"text","text":"Blue Print of Objects contain:\n* Data Representation\n* Object Behavior","x":1380,"y":-303,"width":263,"height":119},
		{"id":"a5a8e0ca7a1cf5f2","type":"text","text":"Object Oriented Programming:\n* Everything in python is an object\n\t* Create them\n\t* Manipulate them\n\t* Destroy them\n\t\t* del or forget (don't use them, no access)\n\t\t\t* python will reclaim these destroyed objects with Garbage Collection","x":1800,"y":-380,"width":681,"height":273},
		{"id":"c8f47302f3763549","type":"text","text":"","x":843,"y":-544,"width":357,"height":92},
		{"id":"8862629c87eb701a","type":"text","text":"Data Abstraction: (Involve making design decisions)\n* Internal representation (through data attribute)\n\t* Should be private\n* Interface for interacting with objects\n\t* Methods/Procedures/Functions\n\t* Define behavior but hide implementation","x":1915,"y":-40,"width":452,"height":211},
		{"id":"f7dd6ce0f94fcb14","type":"text","text":"Advantage of OOP\n* Object = Data + Behavior\nObjects are a bundle of Data and Behavior $\\xrightarrow{result}$ consistency in data in the way to use it\n* Divide-and-Conquer development:\n\t* implement and test behavior of each class separately\n\t* increase modularity, decrease complexity\n* Classes $\\xrightarrow{make\\ it\\ possible\\ to}$ Reuse the code\n\t* Many python modules define new classes\n\t* Each class has a separate environment\n\t\t* No collision on function names (you can use same function name in different classes)\n\t* Inheritance $\\xrightarrow{allows}$ Subclasses to redefine or extend a selected subset of a superclasses behavior","x":2660,"y":-243,"width":815,"height":365},
		{"id":"bc2ff8c0b8ba788a","type":"text","text":"You write a class, so you make the Design Decisions\n* What data represent class\n* What operation user can use on the class","x":2854,"y":200,"width":428,"height":113},
		{"id":"63a975ee7b4c884a","type":"text","text":"Creating vs. Using a Class","x":400,"y":121,"width":250,"height":50},
		{"id":"5fa587ae799b8792","type":"text","text":"Creating:\n* Define a Class name\n* Define class attribute","x":765,"y":10,"width":236,"height":112},
		{"id":"1fbf81f02a266ec0","type":"text","text":"Using:\n* Creating new instance of class\n* Doing operation on the instance","x":765,"y":171,"width":313,"height":113},
		{"id":"297a153b7677eb45","type":"text","text":"Class vs. Function","x":400,"y":560,"width":250,"height":60},
		{"id":"a8e5684312e18996","type":"text","text":"Use:\n* Function $\\rightarrow$ replace formal parameters with actual parameters\n* Class $\\rightarrow$ Create new object instance in memory with this type","x":883,"y":640,"width":530,"height":113},
		{"id":"e71659ed4079dccb","type":"text","text":"Creating:\n* Function $\\rightarrow$ Tell python that this procedure exist\n* Class $\\rightarrow$ Tell python about a blueprint of a new object\n\t* Data type\n\t* Procedural attributes\n","x":883,"y":381,"width":467,"height":179},
		{"id":"36c187ddba88da3b","type":"text","text":"Creating a Class:\n```\nclass Name/Type_of_the_class(parent):\n```\n* `class` keyword for class definition\n```\nclass Coordinate(object):\n```\n* `object` keyword means that; this Coordinate class is a python object and inherit all its attribute like; you can create an object in memory and assign a variable to it\nBody of a Class:\n1. Data attribute: Objects/variables that make up the class\n2. Methods/Procedural attribute: function/procedure that only work with this class\n\t* How to interact with this class (behavioral)","x":400,"y":840,"width":559,"height":479},
		{"id":"09ad9ea0a0fac3de","type":"text","text":"How to Create Instance:\n* Use special method called `__init__`\n\t* Initialize data attribute or perform initialize operations\n```\nclass Coordinate(object):\n\tdef __init__(self, xval, yval):\n\t\tself.x = xval\n\t\tself.y = yval\n```\n","x":1152,"y":940,"width":523,"height":280},
		{"id":"2c6cf81e5a574c4b","type":"text","text":"Self:\n* Self allows you to create variables that belong to this object\n\t* without self you are just writing regular variable\n\t\t* which means that they will be gone after the `__init__` job get done, and you can't access them any more\n\t* with self you creating a variable that will live on through the life cycle of your class\n* Self always going to be first parameter of a method, a function that only woks with an object of this class/type\nWhy self in init?\nTelling python that we like to create this object type, we don't have an actual object to manipulate because we didn't create an actual object yet, yet we telling python that we want to create this object $\\xrightarrow{so}$ So if we don't have an actual object created yet, we need some way to refer to an instance without actually having one yet $\\rightarrow$ this is what self doing $\\rightarrow$ A variable that tells python that this is a function that only work with this type/class, and we gonna use this variable (self) to refer to this object\n* Refer to an object/instance of this type/class without actually having one (not created yet)\n\t* Self is like a unborn baby, we don't know how to call the baby, but still we want to talk to baby","x":1880,"y":894,"width":1284,"height":373},
		{"id":"2e593e39ae2e5b24","type":"text","text":"`self.`:\na variable refer to attributes of a blueprint\n* now when you create one instance of this blueprint, self becomes this actual object\n\t* you can have multiple instances created from same blueprint","x":2580,"y":1483,"width":684,"height":143},
		{"id":"f40d5567e468613f","type":"text","text":"Body of init:\nWhatever you want to initialize your object $\\rightarrow$ your data\n* Without `.self` the variables will be gone after `__init__` jobs get done, but with `.self` they will persist through lifetime of an object\n\t* And every object that we create will have their `x`, `y` values\n* `self.variable_name = parameter_name`\n\t* variable name after `.self` can be different than parameter name","x":1880,"y":1435,"width":590,"height":239},
		{"id":"612284f7d9e93a66","type":"text","text":"When defining a class, we don't have an actual tangible object (we use self)\n* It is only a definition","x":1910,"y":1869,"width":599,"height":109},
		{"id":"71a49753c3eb3cf9","type":"text","text":"Method/Procedural attribute:\n* Function that only within this class\n* Python always passes the object as the first argument\n\t* Convention: use self as the name of the first argument of all methods","x":3460,"y":1360,"width":631,"height":158},
		{"id":"f954cf427b464f30","type":"text","text":"Data attributes of an Instance = Instance variable\n* Defined `self.variable_name`\n\t* they are accessible with dot notation for lifetime of the object\n* all instance have these data attributes, but with different values","x":3460,"y":1122,"width":561,"height":145},
		{"id":"aa6149ca3b4ff875","x":4200,"y":1151,"width":586,"height":288,"type":"text","text":"\".\" operator:\n* access any attribute (data/procedural)\n```\n<object_variable><method>(<parameter>)\n```\n* When you call a function this way self become this `object variable`\n```\n<Class>.<method>(self, parameter)\n```"}
	],
	"edges":[
		{"id":"00b36dfe3c6b610d","fromNode":"d28c7ad80b9528f8","fromSide":"right","toNode":"ef43f49d495763fb","toSide":"left"},
		{"id":"52a2880d30549312","fromNode":"ef43f49d495763fb","fromSide":"right","toNode":"0ae2a3cfba8070c1","toSide":"left"},
		{"id":"f1dd2d3dcd5479f3","fromNode":"0ae2a3cfba8070c1","fromSide":"right","toNode":"0727cf47b55915dd","toSide":"left"},
		{"id":"adb23c14b373ebbf","fromNode":"0727cf47b55915dd","fromSide":"right","toNode":"34676681003109b2","toSide":"left"},
		{"id":"4dbd18b04e8fb4ad","fromNode":"b80a50eae00f1995","fromSide":"right","toNode":"a5a8e0ca7a1cf5f2","toSide":"left"},
		{"id":"1f7ca200947f1027","fromNode":"b80a50eae00f1995","fromSide":"top","toNode":"c8f47302f3763549","toSide":"bottom"},
		{"id":"5b88c597b232bd25","fromNode":"a5a8e0ca7a1cf5f2","fromSide":"right","toNode":"f7dd6ce0f94fcb14","toSide":"left"},
		{"id":"8afc93dca88348d9","fromNode":"a5a8e0ca7a1cf5f2","fromSide":"bottom","toNode":"8862629c87eb701a","toSide":"top"},
		{"id":"e4a93fa1edeb425b","fromNode":"8862629c87eb701a","fromSide":"right","toNode":"f7dd6ce0f94fcb14","toSide":"left"},
		{"id":"f2349c3f585089d4","fromNode":"f7dd6ce0f94fcb14","fromSide":"bottom","toNode":"bc2ff8c0b8ba788a","toSide":"top"},
		{"id":"a0af557d92043dae","fromNode":"8862629c87eb701a","fromSide":"right","toNode":"bc2ff8c0b8ba788a","toSide":"left"},
		{"id":"0d27ef2976d628ff","fromNode":"ef43f49d495763fb","fromSide":"right","toNode":"63a975ee7b4c884a","toSide":"left"},
		{"id":"f6b40e7d2c0860fb","fromNode":"63a975ee7b4c884a","fromSide":"right","toNode":"5fa587ae799b8792","toSide":"left"},
		{"id":"5b65f1b49d4336c1","fromNode":"63a975ee7b4c884a","fromSide":"right","toNode":"1fbf81f02a266ec0","toSide":"left"},
		{"id":"0fbbbac24035490a","fromNode":"297a153b7677eb45","fromSide":"right","toNode":"e71659ed4079dccb","toSide":"left"},
		{"id":"ccab3dd1621a903a","fromNode":"297a153b7677eb45","fromSide":"right","toNode":"a8e5684312e18996","toSide":"left"},
		{"id":"b13c9cc9a06f02d5","fromNode":"ef43f49d495763fb","fromSide":"right","toNode":"297a153b7677eb45","toSide":"left"},
		{"id":"a756332b671eb9b0","fromNode":"36c187ddba88da3b","fromSide":"right","toNode":"09ad9ea0a0fac3de","toSide":"left"},
		{"id":"62f4eefd5d7c66c2","fromNode":"ef43f49d495763fb","fromSide":"right","toNode":"36c187ddba88da3b","toSide":"left"},
		{"id":"01b179f814bde40c","fromNode":"09ad9ea0a0fac3de","fromSide":"right","toNode":"2c6cf81e5a574c4b","toSide":"left"},
		{"id":"90c90b8c8a9b6a6c","fromNode":"f40d5567e468613f","fromSide":"right","toNode":"2e593e39ae2e5b24","toSide":"left"},
		{"id":"b6738a7a630531ef","fromNode":"09ad9ea0a0fac3de","fromSide":"right","toNode":"f40d5567e468613f","toSide":"left"},
		{"id":"722c2f49bc271030","fromNode":"1cef065e5a0e9075","fromSide":"bottom","toNode":"612284f7d9e93a66","toSide":"top"},
		{"id":"41e6ef91d82e90ec","fromNode":"1cef065e5a0e9075","fromSide":"right","toNode":"f954cf427b464f30","toSide":"left"},
		{"id":"342e63f2cb9ad02a","fromNode":"1cef065e5a0e9075","fromSide":"right","toNode":"71a49753c3eb3cf9","toSide":"left"},
		{"id":"cd22b4aafc32c110","fromNode":"f954cf427b464f30","fromSide":"right","toNode":"aa6149ca3b4ff875","toSide":"left"},
		{"id":"092b174ef0c1538d","fromNode":"71a49753c3eb3cf9","fromSide":"right","toNode":"aa6149ca3b4ff875","toSide":"left"}
	]
}