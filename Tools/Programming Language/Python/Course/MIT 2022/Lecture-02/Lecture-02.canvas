{
	"nodes":[
		{"id":"8bee600d82898bc6","type":"text","text":"Slicing: grab individual characters at different positions\n* \\[] (square bracket) perform indexing $\\rightarrow$ get the value at a certain position $\\rightarrow$ indexing start from 0\n![[Indexing]]\nSlicing to create Substring:\n\\[start:stop:step]\n* you can do it this way too \\[start:stop] the step = 1 by default\n* keep in mind that we stop before the stop number $\\rightarrow$ real stop = stop -1\n```\ns = 'abcdefgh'\nprint(s[]) #result into same word\nprint(s[::-1]) #result into reverse\n```","x":500,"y":-432,"width":460,"height":792},
		{"id":"75540e1982a2ab8c","type":"text","text":"Strings:\nsequence of case sensitive characters\n* Enclose in quotation marks or single quotes\n\t* Be consist about the quotes\n\t\t* if you want to have single quote in your `str` you need to use double quote and if you want to have double quote in the `str` you need to use single quote\n* Strings are immutable = cannot be modified/change $\\xrightarrow{instead}$ you can create a new object from a original one\n* Concatenate: `str` + `str`\n* Repeat: `str` * `int`\n* `len()` length of a string, type is int","x":-220,"y":-224,"width":632,"height":376},
		{"id":"fb06ce78de35230f","type":"text","text":"Print command (output):\nto show the output of an expression\n* `print(x, y)` to print with space between them\n* `print(x+y)` to print without a space\n\t* in this format all your variable needs to be string, cause it is concatenating them","x":286,"y":500,"width":429,"height":205},
		{"id":"ecb918cc96cffebe","type":"text","text":"Input/Output","x":-220,"y":688,"width":250,"height":60},
		{"id":"01467a06d23c46e0","type":"text","text":"Input command (input):\nit is an expression form $\\rightarrow$ in the end you need to assigning value to a variable\n* it will always return String\n ","x":286,"y":820,"width":429,"height":140},
		{"id":"f5ad626b3eb62f61","type":"text","text":"F-Strings\n* Available starting with python 3.6\n* Character `f` followed by a formatted string literal\n```\nprint(f\"{varaible/expression} bla bla bla bla {variable/expression}\")\n```","x":880,"y":492,"width":480,"height":222},
		{"id":"d337101410d63ead","type":"text","text":"Instead of having a linear program, we put decision point in our program","x":155,"y":1260,"width":345,"height":76},
		{"id":"f8255758b02513fb","type":"text","text":"Condition for Branching","x":-220,"y":1268,"width":250,"height":60},
		{"id":"387bc81069e12b41","type":"text","text":"Lecture-02","x":-520,"y":688,"width":143,"height":60},
		{"id":"6b9c78202e7664a2","type":"text","text":"Notions of Equal","x":1320,"y":1109,"width":250,"height":60},
		{"id":"ee841e54a8d2bdaf","type":"text","text":"`i>j`, `i<j`, `i>=j`, `i<=j`, `i==j`, `i!=j`(test of inequality)\n* `!=` is case sensitive when you use for strings\n* These expression will return Boolean value","x":1320,"y":1420,"width":477,"height":112},
		{"id":"b15dcc40491c025e","type":"text","text":"= $\\rightarrow$ assign value to a variable","x":1695,"y":1040,"width":305,"height":50},
		{"id":"349f5713329005af","type":"text","text":"== $\\rightarrow$ test equality $\\rightarrow$ will be replace by True, False (Boolean)","x":1695,"y":1169,"width":500,"height":51},
		{"id":"04a909c6a5a3c48d","type":"text","text":"Logical Operators on `bool`\n`not`, `and`, `or`","x":1886,"y":1443,"width":250,"height":67},
		{"id":"28ec0469c65ecb88","type":"text","text":"Comparison Operators","x":960,"y":1268,"width":250,"height":60},
		{"id":"181a57aabb3500e6","type":"text","text":"Booleans","x":680,"y":1268,"width":250,"height":60},
		{"id":"018e8df8645563dc","type":"text","text":"Why Booleans?\nmost important type for programming $\\rightarrow$ enable creating programs that make decision","x":880,"y":1420,"width":309,"height":120},
		{"id":"6d67d4ea9133030e","type":"text","text":"If:\n```\nif <condition>:\n\t<start of your decision block>\n\t<code>\n\t<code>\n\t...\n\t<end of your decision block>\n<rest of the program>\n```\n* `<condition>` has a value of `True` or `False`\n* Indentation matters in Python!\n* if condition is true then it will do the `<code>` == for `<code>` inside if block to get run it needs the `<condition>` to be `True`\n```\nif <condition>:\n\t<code>\n\t<code>\n\t...\nelse:\n\t<code>\n\t<code>\n\t...\n<rest of program>\n```\nelif:\n```\nif <condition>:\n\t<code>\n\t<code>\n\t...\nelif <condition>:\n\t<code>\n\t<code>\n\t...\nelse:\n\t<code>\n\t<code>\n\t...\n<rest of program>\n```\n* only one of elif will be execute, for elif condition you will do the first one that gets to be true\n\t* if you have multiple elif with true condition only the first one will get execute","x":155,"y":1480,"width":480,"height":1191},
		{"id":"b5dd89ab676244f6","type":"file","file":"Tools/Programming Language/Python/Course/MIT 2022/Lecture-02/if-else-elif.md","x":685,"y":1994,"width":400,"height":164},
		{"id":"8b4e6da3adabf961","type":"text","text":"Nested Branching:\nCondition inside condition (like nested query in sql)\n```\nif <condition>:\n\tif <condition>:\n\t\t<code>\n\t<code>\n<code>\n```","x":1156,"y":1935,"width":289,"height":283},
		{"id":"255e947e3f3ac1b9","type":"text","text":"Debug early, Debug Often\n* Write a little, test a little\n* Don't write a complete program at once $\\rightarrow$ it causes so many errors","x":1559,"y":1989,"width":319,"height":173}
	],
	"edges":[
		{"id":"dccc5500f9102c52","fromNode":"75540e1982a2ab8c","fromSide":"right","toNode":"8bee600d82898bc6","toSide":"left"},
		{"id":"9534ec8e576e03cd","fromNode":"ecb918cc96cffebe","fromSide":"right","toNode":"fb06ce78de35230f","toSide":"left"},
		{"id":"118c0b621d178c66","fromNode":"ecb918cc96cffebe","fromSide":"right","toNode":"01467a06d23c46e0","toSide":"left"},
		{"id":"c110445c44e4247c","fromNode":"fb06ce78de35230f","fromSide":"right","toNode":"f5ad626b3eb62f61","toSide":"left"},
		{"id":"dcf145c6846486cb","fromNode":"f8255758b02513fb","fromSide":"right","toNode":"d337101410d63ead","toSide":"left"},
		{"id":"7ab663fd103ca925","fromNode":"6b9c78202e7664a2","fromSide":"right","toNode":"b15dcc40491c025e","toSide":"left"},
		{"id":"af4cc2bf17fcc080","fromNode":"6b9c78202e7664a2","fromSide":"right","toNode":"349f5713329005af","toSide":"left"},
		{"id":"dd8732db4826ce07","fromNode":"28ec0469c65ecb88","fromSide":"right","toNode":"6b9c78202e7664a2","toSide":"left"},
		{"id":"714f691db21f0ef7","fromNode":"28ec0469c65ecb88","fromSide":"right","toNode":"ee841e54a8d2bdaf","toSide":"left"},
		{"id":"abcc079c791408d4","fromNode":"387bc81069e12b41","fromSide":"right","toNode":"75540e1982a2ab8c","toSide":"left"},
		{"id":"ac37e8e0f4e52083","fromNode":"387bc81069e12b41","fromSide":"right","toNode":"ecb918cc96cffebe","toSide":"left"},
		{"id":"fc8222b08653aff9","fromNode":"387bc81069e12b41","fromSide":"right","toNode":"f8255758b02513fb","toSide":"left"},
		{"id":"86bd49e26bb0628f","fromNode":"ee841e54a8d2bdaf","fromSide":"right","toNode":"04a909c6a5a3c48d","toSide":"left"},
		{"id":"6db8250bf6cfeb83","fromNode":"d337101410d63ead","fromSide":"right","toNode":"181a57aabb3500e6","toSide":"left","label":"Basic Brick"},
		{"id":"46dcf17a5087ef65","fromNode":"181a57aabb3500e6","fromSide":"right","toNode":"28ec0469c65ecb88","toSide":"left"},
		{"id":"b29b676bceeaf4a3","fromNode":"181a57aabb3500e6","fromSide":"bottom","toNode":"018e8df8645563dc","toSide":"left"},
		{"id":"09e5740d53619533","fromNode":"f8255758b02513fb","fromSide":"right","toNode":"6d67d4ea9133030e","toSide":"left"},
		{"id":"cd363b549b317e82","fromNode":"6d67d4ea9133030e","fromSide":"right","toNode":"b5dd89ab676244f6","toSide":"left"},
		{"id":"0262dff1e8da46a0","fromNode":"b5dd89ab676244f6","fromSide":"right","toNode":"8b4e6da3adabf961","toSide":"left"},
		{"id":"a90127dbb1284ee9","fromNode":"8b4e6da3adabf961","fromSide":"right","toNode":"255e947e3f3ac1b9","toSide":"left"}
	]
}