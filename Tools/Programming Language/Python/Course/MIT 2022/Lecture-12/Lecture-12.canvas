{
	"nodes":[
		{"id":"9353ddb9edfa8bab","x":2580,"y":924,"width":1854,"height":1350,"type":"group","label":"Testing/Validation"},
		{"id":"9d568ea92959348f","x":2580,"y":2416,"width":2319,"height":369,"type":"group","label":"Debugging"},
		{"id":"d90d35bfbade7e26","x":406,"y":1244,"width":890,"height":558,"type":"group","label":"Whole view"},
		{"id":"9e932d7cfde949f5","x":-80,"y":260,"width":250,"height":60,"type":"text","text":"Function"},
		{"id":"5296069efb42a78b","x":235,"y":-1120,"width":480,"height":749,"type":"text","text":"Common Concept: Apply a function to every element in a sequence, then create a new list with these new values\nCommon $\\xrightarrow{so}$ create new easy way\n`[ expression for elem in iterable if test ]`\none line solution\n```\ndef f(L):\n\tLnew = []\n\tfor e in L:\n\t\tif e%2==0\n\t\t\tLnew.append(e**2)\n\treturn Lnew\n```\ninstead with list comprehension:\n```\nLnew = [e**2 for e in L if e%2==0]\n```\nequal to:\n```\ndef f(expr, old_list, test = lambda x: True):\n\tnew_list = []\n\tfor e in old_list:\n\t\tif test(e):\n\t\tnew_list.append()\n\treturn new_list\n```\n* It doesn't matter what iterable you provide"},
		{"id":"e45a8081e3f01187","x":-145,"y":-776,"width":250,"height":60,"type":"text","text":"List Comprehension"},
		{"id":"c80c232485790535","x":350,"y":162,"width":380,"height":256,"type":"text","text":"if you assign a variable to a function name, that variable work as an alias for that function\n```\ndef f(x,y):\n\nh = f\n```"},
		{"id":"cbbca982329b7f1c","x":350,"y":532,"width":413,"height":525,"type":"text","text":"Function call: \n* You can return a function in another function\n```\ndef make_prod(a):\n\tdef g(b):\n\t\treturn a*b\n\treturn g\n```\n* You can Chain call functions\n```\nval = make_prod(2)(3)\n```\n* If a function call don't know a variable within it's environment it (interpreter) will move the function hierarchy (from bottom to top)\n* Internal Procedure/Function only accessible within scope from parent procedure's/function call"},
		{"id":"cde7824fbaee550c","x":890,"y":681,"width":503,"height":227,"type":"text","text":"* Code can be rewritten without returning function object\n* Good software design/ Avoid messy programming\n\t* Abstraction, Decomposition\n\t* Another tool to structure your code\n* Interrupting Execution\n\t* Full control over program\n\t* Help you achieve partial execution"},
		{"id":"949dee4b17ebd730","x":730,"y":-292,"width":320,"height":328,"type":"text","text":"```\ndef f(x, y=0.1)\n```\n* Default parameters always go in the end\n* If you give value to formal parameter you can even switch their place whatever you want\n```\ndef f(x, y):\nf(y=100, x=200)\n```"},
		{"id":"98a7cb7846a23978","x":350,"y":-158,"width":250,"height":60,"type":"text","text":"Function Default Parameter / Keyword Parameters"},
		{"id":"a13234465171e409","x":-80,"y":1493,"width":250,"height":60,"type":"text","text":"Testing & Debugging"},
		{"id":"b9ba078adb9aca2b","x":948,"y":1637,"width":328,"height":145,"type":"text","text":"Debugging\n* Study event leading up to an error\n\t* Why it is not working?\n\t* How can I fix my program"},
		{"id":"ad8c30aced0ed5d4","x":426,"y":1637,"width":404,"height":145,"type":"text","text":"Test/Validation\n* Compare input/output pairs to specifications\n\t* It's not working\n\t* How can I break my program"},
		{"id":"508edd0adf361519","x":628,"y":1264,"width":440,"height":179,"type":"text","text":"Defensive Programming:\n* Write specification for functions\n\t* In a same time that you are writing code\n* Modularize programs\n* Check conditions on input/output (assertions)"},
		{"id":"10a1e8ba8956e7e8","x":1486,"y":1417,"width":400,"height":211,"type":"text","text":"Pre-Preprations:\n* Break code to smaller pieces\n* Document contraints on modules:\n\t* What do you expect input be?\n\t* What do you expect output be?\n* Document assumptions behind code design\n"},
		{"id":"2159fd8a2ec0ee4b","x":2020,"y":1385,"width":369,"height":276,"type":"text","text":"Real-Preprations:\n* Ensure code runs\n\t* Remove syntax error\n\t* Remove static semantic errors\n\t* With help of python interpreter\n* Have a set of expected result\n\t* input set\n\t* for each input the expected output"},
		{"id":"182575bd24828144","x":2600,"y":1200,"width":250,"height":60,"type":"text","text":"Classes of Test-case\n"},
		{"id":"a2880935997422c0","x":3080,"y":944,"width":317,"height":113,"type":"text","text":"Unit test:\n* Validate each piece of program\n* Testing each function separately"},
		{"id":"31fdc6a3b10b8c1f","x":3080,"y":1174,"width":444,"height":113,"type":"text","text":"Regression test:\n* Add test for bugs that you find\n* Catch reintroduced errors that we previously fixed"},
		{"id":"7707786579907343","x":3080,"y":1396,"width":292,"height":113,"type":"text","text":"Integration test:\n* Does overall program works?\n* Tend to rush to do this"},
		{"id":"a05b69e0d36d97fe","x":2992,"y":1829,"width":472,"height":60,"type":"text","text":"\n* Black Box testing: Explore paths through specification"},
		{"id":"02c63d44e5f2070d","x":2992,"y":1709,"width":547,"height":60,"type":"text","text":"\n* Random testing: more test, higher probability that program work"},
		{"id":"d83b8657354ec7c6","x":2992,"y":1940,"width":415,"height":50,"type":"text","text":"\n\n* Glass box testing: Explore paths through code"},
		{"id":"82ea71801527c540","x":2992,"y":1611,"width":380,"height":50,"type":"text","text":"\n* Intuition: natural boundaries to a problem"},
		{"id":"48faee239f7c86a5","x":2600,"y":1769,"width":250,"height":60,"type":"text","text":"How to write a test?"},
		{"id":"af9be92b07cf2948","x":3740,"y":1611,"width":481,"height":230,"type":"text","text":"* Design without looking at the code\n* Can be done by others than implementer $\\xrightarrow{why?}$ to avoid implementer bias\n* Test can be used again even if implementation change\n* Paths through specification:\n\t* Build test case in different natural space partitions\n\t* Consider boundary conditions"},
		{"id":"16b5e07664321cda","x":3740,"y":1965,"width":674,"height":289,"type":"text","text":"* Use code directly to guid design of test cases\n* Called path-complete if every potential path through code is tested at least once\n* Guidelines:\n\t* Branches\n\t* Loops\n* Drawbacks:\n\t* Missing paths\n\t* Can be arbitrary (Personal)\n\t* You can miss a bug"},
		{"id":"f62272b4cf0c47f3","x":2600,"y":2480,"width":440,"height":239,"type":"text","text":"Debugging:\nNo recipe, experience come in handy\n* Isolate bugs\n* Eradicate bugs\n* Retest until code runs correctly for all test cases\n* Steep learning curve\nIn the end you want a bug free program"},
		{"id":"0063e4f6ccf0da1b","x":3152,"y":2462,"width":387,"height":276,"type":"text","text":"Tools:\n* Built in IDLE in Anaconda\n* Python Tutor\n* `print` statement\n* Use your brain, be systematic in your hunt\n\t* Read Error messages\n\t* For logical errors: think, draw, explain\n* Debugger"},
		{"id":"b6a5a2d73fe3ec72","x":3685,"y":2436,"width":592,"height":329,"type":"text","text":"Tips:\n* Study Program Code:\n\t* Don't ask what is wrong?\n\t* Ask how did I got unexpected result\n\t* Is this error part of a bigger problem/family\n* Scientific methods:\n\t* Study available data\n\t* Form hypothesis\n\t* Repeatable experiments\n\t* pick simplest input to test"},
		{"id":"f673fa86bea967a1","x":4414,"y":2451,"width":465,"height":300,"type":"text","text":"Print statement:\nGood for test hypothesis\n* When to print:\n\t* Enter function\n\t* Parameter\n\t* Function results\n* Use bisection method:\n\t* put print halfway in the code\n\t* Decide where bug might happen base on values"},
		{"id":"3aae3489be2b2e60","x":-600,"y":260,"width":250,"height":60,"type":"text","text":"Lecture-12"}
	],
	"edges":[
		{"id":"1c29da3e7803a961","fromNode":"3aae3489be2b2e60","fromSide":"right","toNode":"e45a8081e3f01187","toSide":"left"},
		{"id":"0bc79d1fc269bbb0","fromNode":"e45a8081e3f01187","fromSide":"right","toNode":"5296069efb42a78b","toSide":"left"},
		{"id":"6fb0b1033f7a0b87","fromNode":"98a7cb7846a23978","fromSide":"right","toNode":"949dee4b17ebd730","toSide":"left"},
		{"id":"30454a812e7b65e9","fromNode":"3aae3489be2b2e60","fromSide":"right","toNode":"9e932d7cfde949f5","toSide":"left"},
		{"id":"3557f87c09ac27a6","fromNode":"9e932d7cfde949f5","fromSide":"right","toNode":"98a7cb7846a23978","toSide":"left"},
		{"id":"ef9d8a0003dbc8c7","fromNode":"9e932d7cfde949f5","fromSide":"right","toNode":"c80c232485790535","toSide":"left"},
		{"id":"ef5536f81e627bf4","fromNode":"9e932d7cfde949f5","fromSide":"right","toNode":"cbbca982329b7f1c","toSide":"left"},
		{"id":"8efb2f768bdd44ed","fromNode":"cbbca982329b7f1c","fromSide":"right","toNode":"cde7824fbaee550c","toSide":"left","label":"why?"},
		{"id":"e579be703c8f8a2e","fromNode":"3aae3489be2b2e60","fromSide":"right","toNode":"a13234465171e409","toSide":"left"},
		{"id":"c544ac08e70c04fd","fromNode":"508edd0adf361519","fromSide":"bottom","toNode":"ad8c30aced0ed5d4","toSide":"top"},
		{"id":"d80d37e5f86777cf","fromNode":"508edd0adf361519","fromSide":"bottom","toNode":"b9ba078adb9aca2b","toSide":"top"},
		{"id":"aa61b40129acb72f","fromNode":"a13234465171e409","fromSide":"right","toNode":"d90d35bfbade7e26","toSide":"left"},
		{"id":"280cf12bad9c2a95","fromNode":"d90d35bfbade7e26","fromSide":"right","toNode":"10a1e8ba8956e7e8","toSide":"left"},
		{"id":"ee6c1178b161f310","fromNode":"10a1e8ba8956e7e8","fromSide":"right","toNode":"2159fd8a2ec0ee4b","toSide":"left"},
		{"id":"f689bed5e86cd3bf","fromNode":"2159fd8a2ec0ee4b","fromSide":"right","toNode":"182575bd24828144","toSide":"left"},
		{"id":"254c9b396cd01ef7","fromNode":"182575bd24828144","fromSide":"right","toNode":"a2880935997422c0","toSide":"left"},
		{"id":"65e886470df41d6f","fromNode":"182575bd24828144","fromSide":"right","toNode":"31fdc6a3b10b8c1f","toSide":"left"},
		{"id":"56afd88c957bc0ff","fromNode":"182575bd24828144","fromSide":"right","toNode":"7707786579907343","toSide":"left"},
		{"id":"25a8e752387fe4d6","fromNode":"31fdc6a3b10b8c1f","fromSide":"left","toNode":"a2880935997422c0","toSide":"left"},
		{"id":"47357c6f13257341","fromNode":"7707786579907343","fromSide":"left","toNode":"a2880935997422c0","toSide":"left"},
		{"id":"781bc74eeafe6ccd","fromNode":"48faee239f7c86a5","fromSide":"right","toNode":"82ea71801527c540","toSide":"left"},
		{"id":"5ae32692340ae2b8","fromNode":"48faee239f7c86a5","fromSide":"right","toNode":"02c63d44e5f2070d","toSide":"left"},
		{"id":"3ce29380c2140cfa","fromNode":"48faee239f7c86a5","fromSide":"right","toNode":"a05b69e0d36d97fe","toSide":"left"},
		{"id":"45d4c39338c843d9","fromNode":"48faee239f7c86a5","fromSide":"right","toNode":"d83b8657354ec7c6","toSide":"left"},
		{"id":"ff3f46f1d538b61c","fromNode":"2159fd8a2ec0ee4b","fromSide":"right","toNode":"48faee239f7c86a5","toSide":"left"},
		{"id":"d8e1308c51b70fcc","fromNode":"a05b69e0d36d97fe","fromSide":"right","toNode":"af9be92b07cf2948","toSide":"left"},
		{"id":"a4502b7b27a0b858","fromNode":"d83b8657354ec7c6","fromSide":"right","toNode":"16b5e07664321cda","toSide":"left"},
		{"id":"430dfade9d9302c1","fromNode":"f62272b4cf0c47f3","fromSide":"right","toNode":"0063e4f6ccf0da1b","toSide":"left"},
		{"id":"df007b6803c77eba","fromNode":"0063e4f6ccf0da1b","fromSide":"right","toNode":"b6a5a2d73fe3ec72","toSide":"left"},
		{"id":"3d4c21033f30f3c4","fromNode":"b6a5a2d73fe3ec72","fromSide":"right","toNode":"f673fa86bea967a1","toSide":"left"},
		{"id":"af9bb1154c7ba421","fromNode":"2159fd8a2ec0ee4b","fromSide":"right","toNode":"f62272b4cf0c47f3","toSide":"left"}
	]
}