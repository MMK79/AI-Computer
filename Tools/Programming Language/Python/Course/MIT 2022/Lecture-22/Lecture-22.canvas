{
	"nodes":[
		{"id":"939fe5bf90e5dae9","type":"text","text":"Lecture-22","x":-449,"y":-68,"width":250,"height":60},
		{"id":"b4427a264ac03ff0","type":"text","text":"Counting:\n* Idea: assume each of step take constant time\n\t* Mathematical operation, assignment, comparison, access memory object\n\t\t* Fast Operations","x":0,"y":272,"width":410,"height":201},
		{"id":"99bcafa7eff0d398","type":"text","text":"Global Variable:\n* Variable that is shared through all over program\n\t* You can create variable in main program and you can access them within any function\n`global variable_name`\n> [!warning] You should never ever use them, OK for debugging","x":500,"y":240,"width":523,"height":265},
		{"id":"6048c19a725c705b","type":"text","text":"Timing:\n* `time` module, `time.perf_counter()` $\\rightarrow$ higher precision than `time.time()` + real world use $\\rightarrow$ Scientific notation; $e-06 = 10^{-6}$\n* Critical tool to assess the performance of programs\n* Irreplaceable for real-world assessment","x":205,"y":-140,"width":454,"height":205},
		{"id":"7f50eb9c72608521","type":"text","text":"Timing: The exact running time of the program\nFlaws:\n* Depends on machine\n* Depend on Implementation\n* Small input don't show impact\nCounting: The exact number of steps\nFlaws:\n* Get us the formula\n* Machine independent\n* Depend on Implementation\n* Multiplicative/Additive Constants are irrelevant for large input (don't matter but we count them...)","x":1320,"y":-223,"width":490,"height":372},
		{"id":"cbbef09edfd1d1da","type":"text","text":"What we want is to Evaluate:\n* Algorithm\n* Scalability\n* In terms of input","x":1960,"y":-124,"width":250,"height":175},
		{"id":"4dbda0ec2e60cc62","type":"text","text":"Efficiency = Order of Growth base on input","x":2280,"y":-62,"width":361,"height":50},
		{"id":"9c04234feb72e5da","type":"text","text":"Asymptotic Complexity: Complementary tool\n* Prior evaluation (Don't even need to run code)\n* Assesses algorithm: no dependency on machine or implementation\n* Provide direct insight into the design of efficient algorithm","x":2720,"y":-109,"width":567,"height":145},
		{"id":"6d39fdc107163a89","type":"text","text":"Order of Growths: better way, Generalized way with approximation\n* it's a notation\n* Evaluate program when it's big\n* Express the growth of program's runtime\n* Puts upper bound on growth\n* Do not need to be precise: \"Order Of\" not \"Exact\" growth\n\t* It is approximation\n* Focus on largest factor in runtime\n\t* Which section will take longest to run\n* Use the idea of Counting Operation, but not worry about small variation in implementation $\\rightarrow$ $\\lim$ for algorithm\n* How algorithm perform when size of problem get arbitrary large\n* Relate time need to complete computation against size of the input to the problem\n> [!warning] Challenge: Need to decide what to measure? What is the input?","x":3540,"y":-277,"width":676,"height":482},
		{"id":"17264342b3f09f83","type":"text","text":"We want to express efficiency in terms of input, so decide what you input is?\n* integer, list, multiple parameter\n\t* Different input change how program run\n\t\t* if it increase does it impact?\n\t\t\t* Imagine worst case scenarios","x":4460,"y":-125,"width":604,"height":179},
		{"id":"08c1ad3f1466fd4a","type":"text","text":"Goal: Describe how time grows as size of input grows $\\rightarrow$ formula relationship of input to number of operations\nGiven expression for number of operations needed to compute algorithm want to know asymptotic behavior as size of problem get large\n* Put bound on growth (order of growth), don't want to be exact/precise\n* Focus on terms that growth rapidly\n\t* Ignore additive and multiplicative constants $\\rightarrow$ $\\lim$, don't have impact on bigger picture\n* this called Order Of Growth:\n\t* Math Notation: $(Big\\ Oh,\\ \"big\\ O\")$, $(Big\\ Theta, big\\ \\Theta)$ ","x":5200,"y":-195,"width":590,"height":319},
		{"id":"bf7a2c5c6bce664b","type":"text","text":"$Big\\ \\Theta$:\nUpper bound and lower bound of your function\n* Focus on dominant term\n\n$$for\\ f(x) = O(g(x))$$\n$$which\\ exist\\ \\textcolor{yellow}{c_0},\\textcolor{blue}{x_0}\\ which \\ \\textcolor{yellow}{c_0}.g(x)\\geq f(x)\\ for\\ all\\ x> \\textcolor{blue}{x_0}$$\n$$\\&$$\n$$which\\ exist\\ \\textcolor{yellow}{c_1},\\textcolor{blue}{x_1}\\ which \\ \\textcolor{yellow}{c_1}.g(x)\\leq f(x)\\ for\\ all\\ x> \\textcolor{blue}{x_1}$$\nMultiple Variable $\\rightarrow$ Dominant part of each:\n* Law of Addition for $\\Theta()$: Sequential Statements\n$$\\Theta(f(n)) + \\Theta(g(n)) = \\Theta(f(n)+g(n))$$\n* Law of Multiplication for $\\Theta()$: Nested Statements/Loops\n$$\\Theta(f(n)) \\times \\Theta(g(n)) = \\Theta(f(n)\\times g(n))$$","x":6060,"y":-40,"width":481,"height":456},
		{"id":"86f43e3bbbf0a143","type":"text","text":"$Big\\ O$:\nUpper bound on the growth of some function:\n$$for\\ f(x) = O(g(x))$$\n$$which\\ exist\\ \\textcolor{yellow}{c_0},\\textcolor{blue}{x_0}\\ which \\ \\textcolor{yellow}{c_0}.g(x)\\geq f(x)\\ for\\ all\\ x> \\textcolor{blue}{x_0}$$\nChallenge: Why not any bigger function?","x":6091,"y":-300,"width":420,"height":186},
		{"id":"802a1e2c9514c3e3","type":"file","file":"Tools/Programming Language/Python/Course/MIT 2022/Lecture-22/Class_of_Algorithms.md","x":6640,"y":64,"width":400,"height":248}
	],
	"edges":[
		{"id":"070494e579e5b7d3","fromNode":"939fe5bf90e5dae9","fromSide":"right","toNode":"6048c19a725c705b","toSide":"left"},
		{"id":"ba92220515f87bdf","fromNode":"939fe5bf90e5dae9","fromSide":"right","toNode":"b4427a264ac03ff0","toSide":"left"},
		{"id":"2fcf3accbc8f5c26","fromNode":"b4427a264ac03ff0","fromSide":"right","toNode":"99bcafa7eff0d398","toSide":"left"},
		{"id":"9a1211a25f7fb7f5","fromNode":"99bcafa7eff0d398","fromSide":"right","toNode":"7f50eb9c72608521","toSide":"left"},
		{"id":"94d830e8d1790d37","fromNode":"6048c19a725c705b","fromSide":"right","toNode":"7f50eb9c72608521","toSide":"left"},
		{"id":"c3fb1e2ce4cf7e76","fromNode":"7f50eb9c72608521","fromSide":"right","toNode":"cbbef09edfd1d1da","toSide":"left"},
		{"id":"0afdda1c102bf1ec","fromNode":"cbbef09edfd1d1da","fromSide":"right","toNode":"4dbda0ec2e60cc62","toSide":"left"},
		{"id":"c0c0cf3326764636","fromNode":"4dbda0ec2e60cc62","fromSide":"right","toNode":"9c04234feb72e5da","toSide":"left"},
		{"id":"5ef16f39f3ab9a9c","fromNode":"9c04234feb72e5da","fromSide":"right","toNode":"6d39fdc107163a89","toSide":"left","label":"Or we call it"},
		{"id":"c3906f4df839e3f2","fromNode":"6d39fdc107163a89","fromSide":"right","toNode":"17264342b3f09f83","toSide":"left","label":"Handle Challenge"},
		{"id":"1ef05c6fbe671a60","fromNode":"17264342b3f09f83","fromSide":"right","toNode":"08c1ad3f1466fd4a","toSide":"left"},
		{"id":"45150f12cbbce269","fromNode":"86f43e3bbbf0a143","fromSide":"bottom","toNode":"bf7a2c5c6bce664b","toSide":"top","label":"Instead we use"},
		{"id":"54ce224e90d83aab","fromNode":"08c1ad3f1466fd4a","fromSide":"right","toNode":"86f43e3bbbf0a143","toSide":"left"},
		{"id":"708a542e5ca4313c","fromNode":"08c1ad3f1466fd4a","fromSide":"right","toNode":"bf7a2c5c6bce664b","toSide":"left"},
		{"id":"f0cb99da3d406c35","fromNode":"bf7a2c5c6bce664b","fromSide":"right","toNode":"802a1e2c9514c3e3","toSide":"left"}
	]
}